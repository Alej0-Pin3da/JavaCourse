/**
 * CONCEPTO 5: VARIABLES EST√ÅTICAS VS DE INSTANCIA
 * 
 * Ejemplo: Variables de instancia - espec√≠ficas para cada objeto
 * Demuestra el comportamiento independiente de las variables de instancia
 */
public class VariablesDeInstancia {
    
    // VARIABLES DE INSTANCIA - cada objeto tiene su propia copia
    private String nombre;
    private int edad;
    private double altura;
    private String email;
    private boolean activo;
    private int numeroIdentificacion;
    
    // Variable est√°tica para generar IDs √∫nicos
    private static int contadorId = 1000;
    
    // CONSTRUCTOR - inicializa variables de instancia
    public VariablesDeInstancia(String nombre, int edad, double altura, String email) {
        // Cada instancia tiene sus propios valores
        this.nombre = nombre;
        this.edad = edad;
        this.altura = altura;
        this.email = email;
        this.activo = true;  // Por defecto activo
        
        // Asignar ID √∫nico usando variable est√°tica
        this.numeroIdentificacion = contadorId++;
        
        System.out.println("‚úÖ Nuevo objeto creado con ID: " + this.numeroIdentificacion);
    }
    
    // M√âTODOS DE INSTANCIA - operan sobre las variables de instancia
    public void mostrarInformacion() {
        System.out.println("--- Informaci√≥n Personal ---");
        System.out.println("ID: " + this.numeroIdentificacion);
        System.out.println("Nombre: " + this.nombre);
        System.out.println("Edad: " + this.edad + " a√±os");
        System.out.println("Altura: " + this.altura + " m");
        System.out.println("Email: " + this.email);
        System.out.println("Estado: " + (this.activo ? "Activo" : "Inactivo"));
        System.out.println();
    }
    
    // M√©todos para modificar variables de instancia
    public void cambiarNombre(String nuevoNombre) {
        String nombreAnterior = this.nombre;
        this.nombre = nuevoNombre;
        System.out.println("ID " + this.numeroIdentificacion + ": Nombre cambiado de '" + nombreAnterior + "' a '" + nuevoNombre + "'");
    }
    
    public void cumplirAnios() {
        this.edad++;
        System.out.println("¬°Feliz cumplea√±os " + this.nombre + "! Ahora tienes " + this.edad + " a√±os");
    }
    
    public void cambiarEstado() {
        this.activo = !this.activo;
        System.out.println(this.nombre + " ahora est√°: " + (this.activo ? "Activo" : "Inactivo"));
    }
    
    public void actualizarEmail(String nuevoEmail) {
        String emailAnterior = this.email;
        this.email = nuevoEmail;
        System.out.println(this.nombre + ": Email actualizado de '" + emailAnterior + "' a '" + nuevoEmail + "'");
    }
    
    // M√©todos getter para acceder a variables de instancia
    public String getNombre() { return this.nombre; }
    public int getEdad() { return this.edad; }
    public double getAltura() { return this.altura; }
    public String getEmail() { return this.email; }
    public boolean isActivo() { return this.activo; }
    public int getNumeroIdentificacion() { return this.numeroIdentificacion; }
    
    // M√©todo est√°tico para mostrar el total de objetos creados
    public static int getTotalObjetosCreados() {
        return contadorId - 1000;  // Restamos el valor inicial
    }
    
    public static void main(String[] args) {
        System.out.println("=== DEMOSTRACI√ìN: VARIABLES DE INSTANCIA ===\n");
        
        // 1. Crear m√∫ltiples objetos
        System.out.println("1. CREANDO M√öLTIPLES OBJETOS:");
        
        VariablesDeInstancia persona1 = new VariablesDeInstancia("Ana Garc√≠a", 25, 1.65, "ana@email.com");
        VariablesDeInstancia persona2 = new VariablesDeInstancia("Carlos L√≥pez", 30, 1.78, "carlos@email.com");
        VariablesDeInstancia persona3 = new VariablesDeInstancia("Mar√≠a Rodr√≠guez", 28, 1.60, "maria@email.com");
        
        System.out.println("Total de objetos creados: " + getTotalObjetosCreados());
        System.out.println();
        
        // 2. Mostrar que cada objeto tiene sus propias variables
        System.out.println("2. CADA OBJETO TIENE SUS PROPIAS VARIABLES:");
        persona1.mostrarInformacion();
        persona2.mostrarInformacion(); 
        persona3.mostrarInformacion();
        
        // 3. Modificar variables de instancia independientemente
        System.out.println("3. MODIFICANDO VARIABLES DE INSTANCIA INDEPENDIENTEMENTE:");
        
        System.out.println("--- Modificando solo persona1 ---");
        persona1.cambiarNombre("Ana Mar√≠a Garc√≠a");
        persona1.cumplirAnios();
        persona1.actualizarEmail("anamaria@newemail.com");
        
        System.out.println("\n--- Modificando solo persona2 ---");
        persona2.cumplirAnios();
        persona2.cambiarEstado();
        
        System.out.println("\n--- Modificando solo persona3 ---");
        persona3.cambiarNombre("Mar√≠a Elena Rodr√≠guez");
        persona3.cambiarEstado();
        persona3.actualizarEmail("mariaelena@email.com");
        
        System.out.println();
        
        // 4. Verificar que los cambios son independientes
        System.out.println("4. VERIFICANDO QUE LOS CAMBIOS SON INDEPENDIENTES:");
        System.out.println("Despu√©s de las modificaciones:");
        
        persona1.mostrarInformacion();
        persona2.mostrarInformacion();
        persona3.mostrarInformacion();
        
        // 5. Demostrar independencia de memoria
        System.out.println("5. DEMOSTRACI√ìN DE INDEPENDENCIA DE MEMORIA:");
        demostracionIndependenciaMemoria(persona1, persona2, persona3);
        
        // 6. Crear m√°s objetos para demostrar que cada uno es independiente
        System.out.println("6. CREANDO M√ÅS OBJETOS PARA DEMOSTRAR INDEPENDENCIA:");
        
        VariablesDeInstancia persona4 = new VariablesDeInstancia("Roberto Silva", 35, 1.80, "roberto@email.com");
        VariablesDeInstancia persona5 = new VariablesDeInstancia("Laura Mendez", 22, 1.55, "laura@email.com");
        
        System.out.println("\nTodos los objetos actuales:");
        VariablesDeInstancia[] todasLasPersonas = {persona1, persona2, persona3, persona4, persona5};
        
        for (int i = 0; i < todasLasPersonas.length; i++) {
            System.out.printf("Objeto %d: ID=%d, Nombre=%s, Edad=%d%n", 
                            (i + 1), 
                            todasLasPersonas[i].getNumeroIdentificacion(),
                            todasLasPersonas[i].getNombre(),
                            todasLasPersonas[i].getEdad());
        }
        
        System.out.println("\nTotal de objetos creados: " + getTotalObjetosCreados());
        
        // 7. Demostrar que modificar uno no afecta a otros
        System.out.println("\n7. DEMOSTRANDO QUE MODIFICAR UNO NO AFECTA A OTROS:");
        System.out.println("Modificando persona4...");
        
        persona4.cambiarNombre("Roberto Carlos Silva");
        persona4.cumplirAnios();
        persona4.cumplirAnios();  // Dos cumplea√±os
        persona4.cambiarEstado();
        
        System.out.println("\nEstado final de persona4:");
        persona4.mostrarInformacion();
        
        System.out.println("Estado de persona5 (SIN cambios):");
        persona5.mostrarInformacion();
        
        System.out.println("‚Üí ¬°Los cambios en persona4 NO afectaron a persona5!");
        
        // 8. Comparaci√≥n final
        System.out.println("8. COMPARACI√ìN FINAL:");
        compararObjetos(persona1, persona2, persona3, persona4, persona5);
    }
    
    public static void demostracionIndependenciaMemoria(VariablesDeInstancia p1, VariablesDeInstancia p2, VariablesDeInstancia p3) {
        System.out.println("üìä AN√ÅLISIS DE MEMORIA PARA VARIABLES DE INSTANCIA:");
        
        System.out.println("\nüîπ CADA OBJETO TIENE SU PROPIA COPIA:");
        System.out.printf("Persona 1 (ID: %d):%n", p1.getNumeroIdentificacion());
        System.out.printf("  ‚îú‚îÄ‚îÄ nombre: '%s' (su propia copia)%n", p1.getNombre());
        System.out.printf("  ‚îú‚îÄ‚îÄ edad: %d (su propia copia)%n", p1.getEdad());
        System.out.printf("  ‚îú‚îÄ‚îÄ altura: %.2f (su propia copia)%n", p1.getAltura());
        System.out.printf("  ‚îî‚îÄ‚îÄ email: '%s' (su propia copia)%n", p1.getEmail());
        
        System.out.printf("%nPersona 2 (ID: %d):%n", p2.getNumeroIdentificacion());
        System.out.printf("  ‚îú‚îÄ‚îÄ nombre: '%s' (DIFERENTE copia)%n", p2.getNombre());
        System.out.printf("  ‚îú‚îÄ‚îÄ edad: %d (DIFERENTE copia)%n", p2.getEdad());
        System.out.printf("  ‚îú‚îÄ‚îÄ altura: %.2f (DIFERENTE copia)%n", p2.getAltura());
        System.out.printf("  ‚îî‚îÄ‚îÄ email: '%s' (DIFERENTE copia)%n", p2.getEmail());
        
        System.out.printf("%nPersona 3 (ID: %d):%n", p3.getNumeroIdentificacion());
        System.out.printf("  ‚îú‚îÄ‚îÄ nombre: '%s' (DIFERENTE copia)%n", p3.getNombre());
        System.out.printf("  ‚îú‚îÄ‚îÄ edad: %d (DIFERENTE copia)%n", p3.getEdad());
        System.out.printf("  ‚îú‚îÄ‚îÄ altura: %.2f (DIFERENTE copia)%n", p3.getAltura());
        System.out.printf("  ‚îî‚îÄ‚îÄ email: '%s' (DIFERENTE copia)%n", p3.getEmail());
        
        System.out.println("\nüí° REPRESENTACI√ìN VISUAL:");
        System.out.println("HEAP DE MEMORIA:");
        System.out.println("‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê");
        System.out.println("‚îÇ   Objeto p1     ‚îÇ    ‚îÇ   Objeto p2     ‚îÇ    ‚îÇ   Objeto p3     ‚îÇ");
        System.out.println("‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§    ‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§    ‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§");
        System.out.printf("‚îÇ nombre: %-7s ‚îÇ    ‚îÇ nombre: %-7s ‚îÇ    ‚îÇ nombre: %-7s ‚îÇ%n", 
                         p1.getNombre().split(" ")[0], p2.getNombre().split(" ")[0], p3.getNombre().split(" ")[0]);
        System.out.printf("‚îÇ edad: %-9d ‚îÇ    ‚îÇ edad: %-9d ‚îÇ    ‚îÇ edad: %-9d ‚îÇ%n", p1.getEdad(), p2.getEdad(), p3.getEdad());
        System.out.printf("‚îÇ altura: %-7.2f ‚îÇ    ‚îÇ altura: %-7.2f ‚îÇ    ‚îÇ altura: %-7.2f ‚îÇ%n", p1.getAltura(), p2.getAltura(), p3.getAltura());
        System.out.printf("‚îÇ activo: %-7s ‚îÇ    ‚îÇ activo: %-7s ‚îÇ    ‚îÇ activo: %-7s ‚îÇ%n", p1.isActivo(), p2.isActivo(), p3.isActivo());
        System.out.println("‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò");
        
        System.out.println("\nüéØ CONCLUSI√ìN:");
        System.out.println("‚Ä¢ Cada objeto ocupa su propio espacio en memoria");
        System.out.println("‚Ä¢ Modificar variables en un objeto NO afecta a otros objetos");
        System.out.println("‚Ä¢ Las variables de instancia son INDEPENDIENTES entre objetos");
        System.out.println("‚Ä¢ Esto permite que cada objeto mantenga su propio estado");
        System.out.println();
    }
    
    public static void compararObjetos(VariablesDeInstancia... personas) {
        System.out.println("üîç COMPARACI√ìN DETALLADA DE TODOS LOS OBJETOS:");
        System.out.println();
        
        System.out.printf("%-3s %-4s %-20s %-4s %-7s %-25s %-7s%n", 
                         "N¬∞", "ID", "NOMBRE", "EDAD", "ALTURA", "EMAIL", "ACTIVO");
        System.out.println("‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ");
        
        for (int i = 0; i < personas.length; i++) {
            VariablesDeInstancia p = personas[i];
            System.out.printf("%-3d %-4d %-20s %-4d %-7.2f %-25s %-7s%n",
                            (i + 1),
                            p.getNumeroIdentificacion(),
                            p.getNombre(),
                            p.getEdad(),
                            p.getAltura(),
                            p.getEmail(),
                            p.isActivo() ? "S√≠" : "No");
        }
        
        System.out.println("\nüí° OBSERVACIONES:");
        System.out.println("‚Ä¢ Cada fila representa un OBJETO DIFERENTE");
        System.out.println("‚Ä¢ Cada objeto tiene sus PROPIOS VALORES para cada variable");
        System.out.println("‚Ä¢ Los IDs son √∫nicos (generados con variable est√°tica)");
        System.out.println("‚Ä¢ Cambiar valores en una fila NO afecta a las otras filas");
        System.out.println("‚Ä¢ Esta es la esencia de las VARIABLES DE INSTANCIA");
    }
}

/*
RESUMEN: VARIABLES DE INSTANCIA

üéØ CARACTER√çSTICAS PRINCIPALES:

1. INDEPENDENCIA:
   ‚Ä¢ Cada objeto tiene su propia copia
   ‚Ä¢ Modificar en un objeto NO afecta a otros
   ‚Ä¢ Valores pueden ser diferentes entre objetos
   ‚Ä¢ Estado individual para cada instancia

2. MEMORIA:
   ‚Ä¢ Se almacenan en el HEAP
   ‚Ä¢ Cada objeto ocupa su propio espacio
   ‚Ä¢ Se crean cuando se instancia el objeto
   ‚Ä¢ Se destruyen cuando el objeto es recolectado por GC

3. ACCESO:
   ‚Ä¢ Solo a trav√©s de una instancia: objeto.variable
   ‚Ä¢ No se pueden acceder desde m√©todos est√°ticos directamente
   ‚Ä¢ Requieren la palabra clave 'this' dentro de la clase

4. INICIALIZACI√ìN:
   ‚Ä¢ En el constructor del objeto
   ‚Ä¢ Con valores por defecto si no se especifican
   ‚Ä¢ Cada vez que se crea un nuevo objeto

üîÑ CICLO DE VIDA:
1. Creaci√≥n del objeto ‚Üí Variables de instancia se inicializan
2. Uso del objeto ‚Üí Variables mantienen estado individual
3. Modificaci√≥n ‚Üí Solo afecta al objeto espec√≠fico
4. Destrucci√≥n del objeto ‚Üí Variables de instancia se liberan

üí° CASOS DE USO T√çPICOS:
‚Ä¢ Atributos de una persona (nombre, edad, altura)
‚Ä¢ Estado de un objeto (saldo de cuenta, posici√≥n)
‚Ä¢ Configuraciones espec√≠ficas por instancia
‚Ä¢ Datos que var√≠an entre objetos de la misma clase

‚úÖ VENTAJAS:
‚Ä¢ Encapsulaci√≥n de datos por objeto
‚Ä¢ Flexibilidad para diferentes estados
‚Ä¢ Facilita la programaci√≥n orientada a objetos
‚Ä¢ Cada objeto es independiente

‚ö†Ô∏è CONSIDERACIONES:
‚Ä¢ M√°s uso de memoria (copia por objeto)
‚Ä¢ Requieren instanciaci√≥n para acceder
‚Ä¢ No compartidas entre objetos
‚Ä¢ Adecuadas para datos espec√≠ficos de cada objeto
*/
